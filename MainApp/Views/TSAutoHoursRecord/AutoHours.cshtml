@using System.Security.Principal
@using Core.BL.Interfaces
@using Core.Models.RBAC
@using Microsoft.AspNetCore.Http


@inject IHttpContextAccessor HttpContextAccessor
@inject IPermissionValidatorService PermissionValidatorService

@{
    ViewBag.Title = "Автозагрузка сотрудников";
}

<h4>Автозагрузка сотрудников</h4>
@using (Html.BeginForm("AutoHours", "TSAutoHoursRecord", FormMethod.Get))
{


    <div class="form-horizontal">
        <div class="form-group report-param-box">


            <div class="col-md-5">
                @Html.DropDownList("year", (SelectList)ViewBag.Years, null, htmlAttributes: new { @class = "form-control", @onchange = "this.form.submit();" })
            </div>
        </div>
    </div>

    <table id="myhours"></table>
    <div id="myhourspager"></div>

    <style>
        .jqgrid-new-row td:nth-child(2) {
            font-size: 0;
        }

        .bg-danger {
            background-color: white;
        }
    </style>

    <script type="text/javascript">
    var isShowDelButton = false;
    @{
        var user = @User;
    }

    @if (PermissionValidatorService.HasAccess(@user, Operation.TSAutoHoursRecordDelete))
    {
         @: isShowDelButton = true;
    }
    else
    {
        @: isShowDelButton = false;
	}


    $(document).ready(function () {
        var lastsel;
            $("#myhours").jqGrid({
                url:
                    '@Html.Raw(@Url.Action("GetAutoHoursData", new { year = ViewBag.CurrentYear, projectID = ViewBag.ProjectID }))',
                datatype: "json",
                pgbuttons: false,
                viewrecords: false,
                //shrinkToFit: false,
                pgtext: "",
                pginput: false,
                colModel: [
                    {
                        name: 'actions', label: ' ', width: 80, fixed: true, sortable: false, resize: false, formatter:
                            'actions',
                        formatoptions: {
                            keys: true,
                            editbutton: true,
                            delbutton: isShowDelButton,
                            delOptions: {
                                url: '/TSAutoHoursRecord/AutoHoursDataSave',
                                onclickSubmit: function(options, id) {
                                    var grid = $('#myhours');
                                    var selectedIdRow = grid.getGridParam('selrow');
                                    var rowData = jQuery('#myhours').getRowData(selectedIdRow);

                                    var beginDate = rowData['BeginDate'];
                                    var endDate = rowData['EndDate'];
                                    var hoursDate = rowData['DayHours'];

                                    return {
                                        'id': id,
                                        'BeginDate': beginDate,
                                        'EndDate': endDate,
                                        'DayHours': hoursDate,
                                        'del': true
                                    };
                                },
                                afterSubmit: function(response, postdata) {
                                    if (response.responseText == 'true') {
                                        $('#myhours').trigger("reloadGrid");
                                        location.reload();
                                        return [true, ''];
                                    } else
                                        return [false, response.responseText];
                                },
                                afterComplete: function(response, postdata) {
                                    $('#myhours').trigger("reloadGrid");
                                    location.reload();
                                }
                            },
                        onSuccess: function (response) {
                            var textResponse = "";
                            if (response.responseText == 'true') {
                                return true;
                            } else
                                textResponse = response.responseText;

                            if ($('#dialog').length == 0) {
                                $(document.body).append('<div id="dialog">' + textResponse + '</div>');
                            } else {
                                $('#dialog').html(textResponse);
                            }
                            $("#dialog").dialog({
                                title : "Ошибка"
                            });
                            $("#dialog").dialog("open");
                            return false;
                        },
                        afterSave: function(rowid) {$(this).trigger("reloadGrid");}
                    }
            },
            {
                name: 'EmployeeID', label: 'ФИО', index: 'EmployeeID', jsonmap: "Employee.FullName", width: 240,
                editable: true, edittype: "select", editrules: { required: true },
                editoptions: {
                    dataUrl: '@Html.Raw(@Url.Action("GetEmployees", new { hoursStartDate = ViewBag.HoursStartDate, hoursEndDate = ViewBag.HoursEndDate }))',
                    buildSelect: BuildJQGridSelect
                }
            },

            { name: 'ID', index: 'ID', width: 40, editable: true, editrules: { edithidden: true, custom_func: ValidateData }, hidden: true, key: true },
            {
                name: 'BeginDate', label: 'Дата начала', index: 'BeginDate', width: 100, align: "right", sortable: true, editable: true, formatter: 'date',
                editrules: {
                    required: true, custom_func: ValidateData,
                    custom: true
                },
                formatoptions: { srcformat: 'ISO8601Long', newformat: 'd.m.Y', reformatAfterEdit: true, minValue: '01.01.2018' },
                editoptions: {
                    dataInit: AddJQGridDatePicker

                }
            },
            {
                name: 'EndDate', label: 'Дата завершения', index: 'EndDate', width: 100, align: "right", sortable: true, editable: true, formatter: 'date',
                editrules: {
                    required: true, custom_func: ValidateData,
                    custom: true
                },
                formatoptions: { srcformat: 'ISO8601Long', newformat: 'd.m.Y', reformatAfterEdit: true, minValue: '01.01.2018' },
                editoptions: {
                    dataInit: AddJQGridDatePicker
                }
            },
            {
                name: 'ProjectID', label: 'Проект', index: 'ProjectID', jsonmap: "Project.ShortName",
                width: 200, editable: true, edittype: "select", editrules: { required: true },
                editoptions: {
                    dataUrl: '@Html.Raw(@Url.Action("GetProjects", new { hoursStartDate = ViewBag.HoursStartDate, hoursEndDate = ViewBag.HoursEndDate }))',
                    buildSelect: BuildJQGridSelect
                }
            },
            {
                name: 'DayHours', label: 'Трудозатраты в день (ч)', index: 'DayHours', minWidth: 95, align: "right", editable: true,
                editrules: {
                    number: true, required: true, custom: true, custom_func: function (value, colname) {

                        if (value.toString().indexOf('.') !== -1) {
                            if (value.toString().split('.')[1].length > 1) {
                                return [false, "Значения после запятой должны быть десятичными"];
                            }
                            if (value < 0.1)
                                return [false, "Вводимые трудозатраты должны быть больше либо равно 0.1 часов"];
                            else if (value > 8)
                                return [false, "Вводимые трудозатраты должны быть меньше или равно 8 часов"];
                        } else {
                            if (value < 0.1)
                                return [false, "Вводимые трудозатраты должны быть больше либо равно 0.1 часов"];
                            else if (value > 8)
                                return [false, "Вводимые трудозатраты должны быть меньше или равно 8 часов"];
                        }
                        return [true, ""];

                    }
                },
                formatoptions: { decimalSeparator: ',' }
            }
        ],
            editurl: '@Url.Action("AutoHoursDataSave")',
            //onSelectRow: editRow,
            rowNum: 5000,
            height: 400,
            sortname: 'RecordDate',
            sortorder: "desc",
            caption: "",
            //cellEdit: true,
            multiselect: true,
            onErrorHandler: function (data) {
            alert(data);
        },
        gridComplete: function () {



            setHeight();
        },
        autowidth: true,
            ajaxSelectOptions: { cache: false },

        pager: "#myhourspager"
    });
    var lastSelection;


    function ValidateData(value, column) {
        $.ajax({
            url: '@Url.Action("ValidateRow")',
            data: { value: value, column: column },
            type: 'POST',
            async: false,
            datatype: 'text',
            success: function(data) {
                var json_obj = JSON.parse(data);
                //alert(json_obj["message"]);
                if (json_obj["message"] == "") result = [true, ""];
                else result = [false, /*column + ": " +*/ json_obj["message"]];
            }
        });
        return result;
    }

    function calculateHours() {
        var grid = $("#myhours");
        var rowIds = grid.jqGrid('getDataIDs');

        var sumHours = 0;

        for (i = 0; i <= rowIds.length - 1; i++) {
            rowData = $('#myhours').jqGrid('getRowData', rowIds[i]);

            if (rowData['Hours'] != '') {
                sumHours += parseFloat(rowData['Hours']);
            }
        }

        document.getElementById("totalHours").innerHTML = sumHours;
    }


    function setHeight() {

        // var height = $(window).height();
        var grid = $("#myhours");
        var rowIds = grid.jqGrid('getDataIDs');
        $('.ui-jqgrid-bdiv').height(rowIds.length * 37 + 15);
    }

    function editRow(id) {
        if (id && id !== lastSelection) {
            var grid = $("#myhours");
            grid.jqGrid('restoreRow', lastSelection);
            grid.jqGrid('editRow', id, { keys: true });
            lastSelection = id;
        }
    }


        $('#myhours').navGrid("#myhourspager",
            { search: false, edit: false, add: false, del: false, refresh: true },
            {},
            {},
            {},
            {}).navButtonAdd('#myhourspager',
            {
                id: "exportToExel",
                caption: "",
                title: "Экспорт в Excel",
                buttonicon: "glyphicon glyphicon-export",
                onClickButton: function (e) {
                    window.location.href = '@Url.Action("ExportTsAutoHoursRecordToExcel")';
                },
                position: "last"
            });


    $('#myhours').inlineNav('#myhourspager', {
        edit: true,
        add: true,
        del: true,
        cancel: true,
        editParams: {
            keys: true,
            successfunc: function (response) {
                var textError = "";
                if (response.responseText == 'true') {
                    $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                    return true;
                } else
                    textError = response.responseText;
                if ($('#dialog').length == 0) {
                    $(document.body).append('<div id="dialog">' + textError + '</div>');
                } else {
                    $('#dialog').html(textError);
                }
                $("#dialog").dialog({
                    title: "Ошибка"
                });
                $("#dialog").dialog("open");
                return false;
            }

        },
        addParams: {
            keys: true,
            position: "last",
            addRowParams: {
                successfunc: function (response) {
                    var textError = "";
                    if (response.responseText == 'true') {
                        $(this).jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                        return true;
                    } else
                        textError = response.responseText;
                    if ($('#dialog').length == 0) {
                        $(document.body).append('<div id="dialog">' + textError + '</div>');
                    } else {
                        $('#dialog').html(textError);
                    }
                    $("#dialog").dialog({
                        title: "Ошибка"
                    });
                    $("#dialog").dialog("open");
                    return false;
                }
            }
        }
    });


    });



    function rowColorFormatter(cellValue, options, rowObject) {
        if (cellValue == "True")
            rowsToColor[rowsToColor.length] = options.rowId;
        return cellValue;
    }

    function getSelected() {
        var grid = $("#myhours");
        var rows = grid.getGridParam('selarrrow');

        if (rows.length == 0) {
            alert('Вы не выбрали ни одной строчки!');
            return false;
        }

        $('input[name="rowsForApprove"]').val(rows);

        return confirm('Вы действительно хотите отправить на согласование выбранные строки?');
        //return true;
    }


    </script>
    <br />

    <style>
        .form-control {
            padding: 3px 5px;
        }
    </style>
}



