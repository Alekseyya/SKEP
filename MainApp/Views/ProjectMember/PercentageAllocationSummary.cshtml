@model Core.Models.Department
@{
    ViewBag.Title = "Загрузка сотрудников";
}

@Html.Hidden("currentDepartmentId", Model.ID)

<form id="search_filter">
    <div class="form-horizontal">
        <div class="form-group">
            <span class="col-sm-2 control-label rmx-text-left"><strong>Шаг загрузки</strong></span>
            <div class="col-sm-10">
                <div class="form-group row">
                    <label class="col-sm-3">
                        <input type="radio" name="periodStep" id="periodStep_Week" value="Week" />
                        Неделя
                    </label>
                    <label class="col-sm-3">
                        <input type="radio" name="periodStep" id="periodStep_Month" value="Month" />
                        Месяц
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-12">
                <div class="form-group row">
                    <label class="col-sm-4">
                        <input type="radio" name="filterEmployees" id="filterEmployees_employees" value="employees" />
                        По сотрудникам
                    </label>
                    <label class="col-sm-4">
                        <input type="radio" name="filterEmployees" id="filterEmployees_departments" value="departments" />
                        По отделам
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-10 col-sm-offset-2">
                <div class="form-group row">
                    <div id="filter_control_employees" class="col-sm-5">
                        <label for="employees">Сотрудник</label>
                        @Html.DropDownList("employees", (SelectList)ViewBag.employees, "", new { @class = "form-control" })
                    </div>
                    <div id="filter_control_departments" class="col-sm-5">
                        <label for="childDepartments">Отдел</label>
                        @Html.DropDownList("childDepartments", (SelectList)ViewBag.childDepartments, "", new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <span class="col-sm-2 control-label rmx-text-left"><strong>Тип фильтра</strong></span>
            <div class="col-sm-10">
                <div class="form-group row">
                    <label class="col-sm-3">
                        <input type="radio" name="filterType" id="filterType_dates" value="dates" />
                        По датам
                    </label>
                    <label class="col-sm-3">
                        <input type="radio" name="filterType" id="filterType_workload" value="workload" />
                        По загрузке
                    </label>
                </div>
            </div>
        </div>
        <div id="filter_control_dates" class="form-group">
            <div class="col-sm-12">
                <div class="form-group row">
                    <label for="date_from" class="col-sm-2 control-label">С</label>
                    <div class="col-sm-3">
                        <input type="text" id="date_from" name="date_from" class="form-control" />
                    </div>
                    <label class="col-sm-1 control-label">По</label>
                    <div class="col-sm-3">
                        <input type="text" id="date_to" name="date_to" class="form-control" />
                    </div>
                </div>
            </div>
        </div>
        <div id="filter_control_workload" class="form-group">
            <div class="col-sm-10 col-sm-offset-2">
                <div class="form-group row">
                    <label class="col-sm-3">
                        <input type="radio" name="filter_workload" id="filter_workload_less" value="less" />
                        &lt;50%
                    </label>
                    <label class="col-sm-3">
                        <input type="radio" name="filter_workload" id="filter_workload_more" value="more" />
                        &gt;50%
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button id="btn_show" type="button" class="btn btn-primary">Показать</button>
            </div>
        </div>
    </div>
</form>
<div id="results">
    <div class="row">
        <div class="col-xs-3">
            <div class="row">
                <div class="col-xs-2 color-legend bg-success"></div>
                <div class="col-xs-7">меньше 100%</div>
            </div>
            <div class="row">
                <div class="col-xs-2 color-legend bg-warning"></div>
                <div class="col-xs-7">100%</div>
            </div>
            <div class="row">
                <div class="col-xs-2 color-legend bg-danger"></div>
                <div class="col-xs-7">больше 100%</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div>&nbsp;</div>
    </div>
    <div class="row">
        <div class="col-xs-3 employee-names">
            <table id="employee_workload_names" class="table table-striped table-bordered table-condensed">
                <thead>
                    <tr>
                        <td>&nbsp;</td>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <div class="col-xs-9 employee-workload">
            <table id="employee_workload_data" class="table table-striped table-bordered table-condensed">
                <thead></thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>
<div id="no_data" class="bg-warning">
    Данные о загрузке сотрудников отсутствуют
</div>
<div id="service_error" class="text-danger bg-danger">
    <p id="service_error_text"></p>
    <p id="service_error_code"></p>
    <p id="service_error_message"></p>
</div>

<style type="text/css">
    .rmx-text-left {
        text-align: left !important;
    }

    label.error {
        color: red;
        font-weight: normal;
    }

    .color-legend {
        width: 50px;
        height: 25px;
    }

    .employee-names {
        padding-right: 0;
        /*min-width: 300px;*/
    }

    .employee-workload {
        overflow-x: auto;
        padding-left: 0;
    }

    #results {
        min-width: 1200px;
    }

    #employee_workload_names td {
        white-space: nowrap;
        height: 30px;
    }

    #employee_workload_data {
        width: auto;
    }

    #no_data {
        padding: 20px;
        width: 50%;
        font-weight: bold;
    }
</style>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@

<script type="text/javascript">
    function handleGenericAjaxError(errorData) {
        console.log(errorData);

        setErrorMessage(errorData);
        setFormState("has_service_error", true);
        updateFormDisplay();
    }

    function setErrorMessage(errorData) {
        $("#service_error_text").text("Произошла ошибка, попробуйте еще раза или обратитесь к администратору");
        $("#service_error_code").text(errorData.status);
        if (errorData.responseJSON)
            $("#service_error_message").text(errorData.responseText);
        else
            $("#service_error_message").text(errorData.statusText);
    }

    function initFormState() {
        var startDate = moment().startOf("year");
        var endDate = moment().endOf("year");
        if (moment().month() < 6)
            startDate.year(startDate.year() - 1);
        else
            endDate.year(endDate.year() + 1);

        var state = {
            department_id: @Model.ID,
            min_date: startDate,
            max_date: endDate,
            filter_display_type: "dates",
            filter_employees_type: "employees",
            period_step: "Week",
            filter_workload: "less",
            has_results: false,
            has_empty_results: false,
            has_service_error: false
        };

        var outerElem = $("#search_filter");
        outerElem.data("_form_state", state);
    }

    function setFormState(key, value) {
        var outerElem = $("#search_filter");
        var state = outerElem.data("_form_state");
        state[key] = value;
    }

    function getFormState(key) {
        var outerElem = $("#search_filter");
        var state = outerElem.data("_form_state");
        return state[key];
    }

    function updateFormDisplay() {
        var filterDisplayType = getFormState("filter_display_type");
        if (filterDisplayType == "dates") {
            $("#filter_control_dates").show();
            $("#filter_control_workload").hide();
        }
        else if (filterDisplayType == "workload") {
            $("#filter_control_dates").hide();
            $("#filter_control_workload").show();
        }

        var filterEmployeesType = getFormState("filter_employees_type");
        if (filterEmployeesType == "employees") {
            $("#filter_control_employees").show();
            $("#filter_control_departments").hide();
        }
        else if (filterEmployeesType == "departments") {
            $("#filter_control_employees").hide();
            $("#filter_control_departments").show();
        }

        var hasResults = getFormState("has_results");
        if (hasResults)
            $("#results").show();
        else
            $("#results").hide();

        var hasEmptyResults = getFormState("has_empty_results");
        if (hasEmptyResults)
            $("#no_data").show();
        else
            $("#no_data").hide();

        var hasServiceError = getFormState("has_service_error");
        if (hasServiceError)
            $("#service_error").show();
        else
            $("#service_error").hide();
    }

    function hideDataDisplay() {
        setFormState("has_results", false);
        setFormState("has_empty_results", false);
        setFormState("has_service_error", false);
        updateFormDisplay();
    }

    function validateForm() {
        var validator = $("#search_filter").validate();
        validator.resetForm();
        var isValid = true;

        if (getFormState("filter_employees_type") == "departments" && !getFormState("child_department_id")) {
            validator.showErrors({
                "childDepartments": "Укажите отдел"
            });
            isValid = false;
        }

        if (getFormState("filter_display_type") == "dates") {
            var dateFrom = getFormState("date_from");
            var dateTo = getFormState("date_to");
            if (dateFrom && dateTo && dateFrom.isAfter(dateTo)) {
                validator.showErrors({
                    "date_to": 'Дата "По" должна быть больше или равна дате "С"'
                });
                isValid = false;
            }
        }

        return isValid;
    }

    function onShowData() {
        if (!validateForm())
            return;

        hideDataDisplay();
        var url = getServiceUrl();
        var employeeId = getFormState("employee_id");
        var workloadType = getFormState("filter_workload");
        if (getFormState("filter_display_type") != "workload")
            workloadType = null;
        console.log(url);
        $.ajax(url, {
            method: "GET",
            contentType: "application/json"
        })
            .then(function (data) { showDisplayTable(data, employeeId, workloadType); },
                handleGenericAjaxError);
    }

    function showDisplayTable(departmentWorkloadData, employeeId, workloadType) {
        console.log(employeeId);
        console.log(workloadType);
        console.log(departmentWorkloadData);

        var employeesWorkloads = [];
        if (employeeId) {
            for (var i = 0; i < departmentWorkloadData.employeesWorkloads.length; i++) {
                if (departmentWorkloadData.employeesWorkloads[i].employeeId == employeeId) {
                    employeesWorkloads = [departmentWorkloadData.employeesWorkloads[i]];
                    break;
                }
            }
        }
        else {
            employeesWorkloads = departmentWorkloadData.employeesWorkloads;
        }

        if (employeesWorkloads.length > 0) {
            var namesTableBody = $("#employee_workload_names tbody");
            var dataTableBody = $("#employee_workload_data tbody");
            namesTableBody.empty();
            dataTableBody.empty();
            for (var i = 0; i < employeesWorkloads.length; i++) {
                var employeeWorkload = employeesWorkloads[i];
                var row = $("<tr></tr>");
                var cell = $("<td></td>");
                cell.text(employeeWorkload.employeeFullName);
                row.append(cell);
                namesTableBody.append(row);
                row = $("<tr></tr>");
                dataTableBody.append(row);
            }

            var dataTableHead = $("#employee_workload_data thead");
            dataTableHead.empty();
            var dataHeaderRow = $("<tr></tr>");
            dataTableHead.append(dataHeaderRow);

            for (var i = 0; i < departmentWorkloadData.dateRanges.length; i++) {
                var dateRange = departmentWorkloadData.dateRanges[i];
                var dateFrom = moment(dateRange.begin);
                var dateTo = moment(dateRange.end);
                var headerCell = $("<th></th>");
                var text = dateFrom.format("DD.MM") + "&ndash;" + dateTo.format("DD.MM");
                headerCell.html(text);
                dataHeaderRow.append(headerCell);
                for (var j = 0; j < employeesWorkloads.length; j++) {
                    var row = $("tr", dataTableBody);
                    var row = $(row[j]);
                    var workload = employeesWorkloads[j].workloads[i];
                    var cell = $("<td></td>");
                    if (!workloadType || (workloadType == "less" && workload <= 50) || (workloadType == "more" && workload >= 50)) {
                        cell.text(workload);
                        if (workload > 100)
                            cell.addClass("bg-danger");
                        else if (workload == 100)
                            cell.addClass("bg-warning");
                        else
                            cell.addClass("bg-success");
                    }

                    cell.css("min-width", "90px");
                    cell.css("max-width", "90px");
                    cell.css("width", "90px");
                    cell.css("min-height", "30px");
                    cell.css("max-height", "30px");
                    cell.css("height", "30px");
                    row.append(cell);
                }
            }
            setFormState("has_results", true);
        }
        else {
            setFormState("has_empty_results", true);
        }
        updateFormDisplay();
    }

    function getServiceUrl() {
        var template;
        var filterEmployeeType = getFormState("filter_employees_type");
        if (filterEmployeeType == "departments") {
            template = "@Url.RouteUrl("ApiEmployeesWorkloadChildDepartment", new {
                       departmentId = "(departmentId)",
                       dateFrom = "(dateFrom)",
                       dateTo = "(dateTo)",
                       workloadPeriod = "(workloadPeriod)",
                       childDepartmentId = "(childDepartmentId)"
                   })";
            var childDepId = getFormState("child_department_id");
            template = template.replace("(childDepartmentId)", childDepId);
        }
        else if (filterEmployeeType == "employees") {
            template = "@Url.RouteUrl("ApiEmployeesWorkloadDepartment", new {
                       departmentId = "(departmentId)",
                       dateFrom = "(dateFrom)",
                       dateTo = "(dateTo)",
                       workloadPeriod = "(workloadPeriod)"
                   })";
        }
        template = template.replace("(departmentId)", getFormState("department_id"));
        template = template.replace("(workloadPeriod)", getFormState("period_step"));
        var dateFrom = getFormState("date_from");
        if (!dateFrom)
            dateFrom = moment();
        template = template.replace("(dateFrom)", dateFrom.format("YYYY-MM-DD"));
        var dateTo = getFormState("date_to");
        if (!dateTo)
            dateTo = moment().endOf("year");
        template = template.replace("(dateTo)", dateTo.format("YYYY-MM-DD"));
        return template;
    }

    function initForm() {
        $("#employees").combobox({
            select: function (event, ui) {
                var employeeId = ui.item.value;
                if (employeeId)
                    setFormState("employee_id", employeeId);
                else
                    setFormState("employee_id", null);
                updateFormDisplay();
            }
        });

        $("#childDepartments").combobox({
            select: function (event, ui) {
                var departmentId = ui.item.value;
                if (departmentId)
                    setFormState("child_department_id", departmentId);
                else
                    setFormState("child_department_id", null);
                updateFormDisplay();
            }
        });

        $("#date_from").datepicker({
            dateFormat: "dd.mm.yy",
            minDate: getFormState("min_date").toDate(),
            maxDate: getFormState("max_date").toDate()
        });
        $("#date_to").datepicker({
            dateFormat: "dd.mm.yy",
            minDate: getFormState("min_date").toDate(),
            maxDate: getFormState("max_date").toDate()
        });

        var periodStepSelector = "#periodStep_" + getFormState("period_step");
        $(periodStepSelector).prop("checked", true);

        var filterWorkloadSelector = "#filter_workload_" + getFormState("filter_workload");
        $(filterWorkloadSelector).prop("checked", true);

        var filterEmployeesSelector = "#filterEmployees_" + getFormState("filter_employees_type");
        $(filterEmployeesSelector).prop("checked", true);

        var filterDisplaySelector = "#filterType_" + getFormState("filter_display_type");
        $(filterDisplaySelector).prop("checked", true);

        $("input[name=periodStep]").on("change", function () {
            var stepType = $(this).val();
            setFormState("period_step", stepType);
            updateFormDisplay();
        });

        $("input[name=filterEmployees]").on("change", function () {
            var filterType = $(this).val();
            setFormState("filter_employees_type", filterType);
            updateFormDisplay();
        });

        $("input[name=filterType]").on("change", function () {
            var filterType = $(this).val();
            setFormState("filter_display_type", filterType);
            updateFormDisplay();
        });

        $("input[name=filter_workload]").on("change", function () {
            var filterType = $(this).val();
            setFormState("filter_workload", filterType);
            updateFormDisplay();
        });

        $("#date_from").on("change", function () {
            var selectedDate = $(this).datepicker("getDate");
            if (selectedDate)
                setFormState("date_from", moment(selectedDate));
            else
                setFormState("date_from", null);
        });

        $("#date_to").on("change", function () {
            var selectedDate = $(this).datepicker("getDate");
            if (selectedDate)
                setFormState("date_to", moment(selectedDate));
            else
                setFormState("date_to", null);
        });

        $("#btn_show").on("click", onShowData);
    }

    $(function () {
        initFormState();
        initForm();
        updateFormDisplay();
    });

</script>
