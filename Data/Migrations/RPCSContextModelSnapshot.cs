// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.Migrations
{
    [DbContext(typeof(RPCSContext))]
    partial class RPCSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RMX.RPCS.Core.Models.AppProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("AppProperty");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.BudgetLimit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<int?>("BudgetLimitID");

                    b.Property<int?>("CostSubItemID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<decimal?>("FundsExpendedAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<decimal?>("LimitAmount")
                        .IsRequired();

                    b.Property<decimal?>("LimitAmountApproved");

                    b.Property<DateTime?>("Modified");

                    b.Property<int?>("Month")
                        .IsRequired();

                    b.Property<int?>("ProjectID");

                    b.Property<int?>("VersionNumber");

                    b.Property<int?>("Year")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BudgetLimitID");

                    b.HasIndex("CostSubItemID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ProjectID");

                    b.ToTable("BudgetLimit");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.CostItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<int?>("CostItemID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("CostItemID");

                    b.ToTable("CostItem");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.CostSubItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<int>("CostItemID");

                    b.Property<int?>("CostSubItemID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsProjectBusinessTripCosts");

                    b.Property<bool>("IsProjectEquipmentCostsForResale");

                    b.Property<bool>("IsProjectOtherCosts");

                    b.Property<bool>("IsProjectPerformanceBonusCosts");

                    b.Property<bool>("IsProjectSubcontractorsCosts");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("CostItemID");

                    b.HasIndex("CostSubItemID");

                    b.ToTable("CostSubItem");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DepartmentManagerAssistantID");

                    b.Property<int?>("DepartmentManagerID");

                    b.Property<int?>("DepartmentPAID");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<bool>("IsAutonomous");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFinancialCentre");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<int?>("OrganisationID");

                    b.Property<int?>("ParentDepartmentID");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("ShortTitle");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<bool>("UsePayrollHalfYearValue");

                    b.Property<bool>("UsePayrollQuarterValue");

                    b.Property<bool>("UsePayrollYearValue");

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentManagerAssistantID");

                    b.HasIndex("DepartmentManagerID");

                    b.HasIndex("DepartmentPAID");

                    b.HasIndex("OrganisationID");

                    b.HasIndex("ParentDepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ADEmployeeID");

                    b.Property<string>("ADLogin");

                    b.Property<string>("AirlineCardInfo");

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<DateTime?>("BirthdayDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DepartmentID");

                    b.Property<DateTime?>("DismissalDate");

                    b.Property<string>("DismissalReason");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<string>("Email");

                    b.Property<string>("EmergencyContactMobilePhoneNumber");

                    b.Property<string>("EmergencyContactName");

                    b.Property<int?>("EmployeeGradID");

                    b.Property<int?>("EmployeeID");

                    b.Property<int?>("EmployeeLocationID");

                    b.Property<int?>("EmployeePositionID");

                    b.Property<int?>("EmployeePositionOfficialID");

                    b.Property<string>("EmployeePositionTitle");

                    b.Property<DateTime?>("EnrollmentDate");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("ForeignPassportDueDate");

                    b.Property<string>("ForeignPassportNumber");

                    b.Property<string>("HomeAddress");

                    b.Property<DateTime?>("InternationalPassportDueDate");

                    b.Property<string>("InternationalPassportName");

                    b.Property<string>("InternationalPassportNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVacancy");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<string>("LastName");

                    b.Property<string>("MedicalInsuranceInfo");

                    b.Property<string>("MidName");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("OfficeName");

                    b.Property<int?>("OrganisationID");

                    b.Property<string>("PassportNumber");

                    b.Property<string>("PersonalMobilePhoneNumber");

                    b.Property<DateTime?>("ProbationEndDate");

                    b.Property<string>("PublicMobilePhoneNumber");

                    b.Property<string>("SkypeLogin");

                    b.Property<string>("Specialization");

                    b.Property<string>("VacancyID");

                    b.Property<int?>("VersionNumber");

                    b.Property<string>("WorkPhoneNumber");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeGradID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("EmployeeLocationID");

                    b.HasIndex("EmployeePositionID");

                    b.HasIndex("EmployeePositionOfficialID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CategoryDateBegin");

                    b.Property<DateTime?>("CategoryDateEnd");

                    b.Property<int>("CategoryType");

                    b.Property<string>("Comments");

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeCategory");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeDepartmentAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<string>("Comments");

                    b.Property<int?>("DepartmentID")
                        .IsRequired();

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeDepartmentAssignment");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeGrad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EmployeeGrad");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeGradAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<string>("Comments");

                    b.Property<int?>("EmployeeGradID")
                        .IsRequired();

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.Property<string>("ExternalSourceElementID");

                    b.Property<string>("ExternalSourceListID");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeGradID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeGradAssignment");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeLocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EmployeeLocation");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EmployeePosition");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePositionAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<string>("Comments");

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.Property<int?>("EmployeePositionID")
                        .IsRequired();

                    b.Property<string>("EmployeePositionTitle");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("EmployeePositionID");

                    b.ToTable("EmployeePositionAssignment");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePositionOfficial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OrganisationID");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("EmployeePositionOfficial");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePositionOfficialAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginDate");

                    b.Property<string>("Comments");

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.Property<int?>("EmployeePositionOfficialID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("EmployeePositionOfficialID");

                    b.ToTable("EmployeePositionOfficialAssignment");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeQualifyingRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.Property<DateTime?>("QualifyingRoleDateBegin");

                    b.Property<DateTime?>("QualifyingRoleDateEnd");

                    b.Property<int?>("QualifyingRoleID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("QualifyingRoleID");

                    b.ToTable("EmployeeQualifyingRole");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ExpensesRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount")
                        .IsRequired();

                    b.Property<decimal?>("AmountNoVAT");

                    b.Property<decimal?>("AmountReserved");

                    b.Property<DateTime?>("AmountReservedApprovedActualDate");

                    b.Property<decimal?>("AmountReservedNoVAT");

                    b.Property<string>("BitrixURegNum")
                        .IsRequired();

                    b.Property<int>("CostSubItemID");

                    b.Property<int>("DepartmentID");

                    b.Property<DateTime>("ExpensesDate");

                    b.Property<string>("ExpensesRecordName");

                    b.Property<DateTime?>("PaymentCompletedActualDate");

                    b.Property<int>("ProjectID");

                    b.Property<int>("RecordStatus");

                    b.Property<int>("SourceDB");

                    b.Property<string>("SourceElementID");

                    b.Property<string>("SourceListID");

                    b.HasKey("ID");

                    b.HasIndex("CostSubItemID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ExpensesRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Organisation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProductionCalendarRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CalendarDate");

                    b.Property<int>("Day");

                    b.Property<bool>("IsCelebratory");

                    b.Property<int>("Month");

                    b.Property<int>("WorkingHours");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.ToTable("ProductionCalendarRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowTSRecordOnlyWorkingDays");

                    b.Property<bool>("AllowTSRecordWithoutProjectMembership");

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<bool>("AutoImportTSRecordFromJIRA");

                    b.Property<DateTime?>("BeginDate");

                    b.Property<string>("CalcDocTemplateVersion");

                    b.Property<string>("CalcDocTemplateVersionPMP");

                    b.Property<DateTime?>("CalcDocUploaded");

                    b.Property<string>("CalcDocUploadedBy");

                    b.Property<string>("CalcDocUploadedByPMP");

                    b.Property<DateTime?>("CalcDocUploadedPMP");

                    b.Property<string>("Comments");

                    b.Property<decimal?>("ContractAmount")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("ContractEquipmentResaleAmount");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CustomerTitle");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DepartmentID");

                    b.Property<bool>("DisallowUserCreateTSRecord");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<int?>("EmployeeCAMID");

                    b.Property<decimal?>("EmployeeHoursBudget");

                    b.Property<decimal?>("EmployeeHoursBudgetPMP");

                    b.Property<int?>("EmployeePAID");

                    b.Property<int?>("EmployeePMID");

                    b.Property<decimal?>("EmployeePayrollBudget")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("EmployeePayrollBudgetPMP");

                    b.Property<decimal?>("EmployeePayrollTotalAmountActual")
                        .HasColumnType("decimal(32,2)");

                    b.Property<DateTime?>("EndDate");

                    b.Property<decimal?>("EquipmentCostsForResale");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPaused");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<decimal?>("OrganisationAmountBudget")
                        .HasColumnType("decimal(32,2)");

                    b.Property<int?>("OrganisationID");

                    b.Property<decimal?>("OtherCostsBudget")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("OtherCostsBudgetPMP");

                    b.Property<int?>("ParentProjectID");

                    b.Property<int?>("ProductionDepartmentID");

                    b.Property<string>("ProjectDocsURL");

                    b.Property<int?>("ProjectTypeID");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<decimal?>("SubcontractorsAmountBudget")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("SubcontractorsAmountBudgetPMP");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<double?>("TotalHoursActual");

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeCAMID");

                    b.HasIndex("EmployeePAID");

                    b.HasIndex("EmployeePMID");

                    b.HasIndex("OrganisationID");

                    b.HasIndex("ProductionDepartmentID");

                    b.HasIndex("ProjectTypeID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectMember", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentPercentage");

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("MembershipDateBegin");

                    b.Property<DateTime?>("MembershipDateEnd");

                    b.Property<int?>("ProjectID");

                    b.Property<int?>("ProjectRoleID");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectRoleID");

                    b.ToTable("ProjectMember");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectReportRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CalcDate");

                    b.Property<string>("Comments");

                    b.Property<int?>("EmployeeCount");

                    b.Property<int?>("EmployeeID");

                    b.Property<decimal?>("EmployeeOvertimePayroll")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("EmployeePayroll")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("EmployeePerformanceBonus")
                        .HasColumnType("decimal(32,2)");

                    b.Property<double?>("Hours");

                    b.Property<decimal?>("OtherCosts")
                        .HasColumnType("decimal(32,2)");

                    b.Property<int?>("ProjectID");

                    b.Property<string>("ReportPeriodName")
                        .IsRequired();

                    b.Property<decimal?>("TotalCosts")
                        .HasColumnType("decimal(32,2)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectReportRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleType");

                    b.Property<string>("ShortName");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("ProjectRole");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectScheduleEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount");

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<string>("Comments");

                    b.Property<string>("ContractNum");

                    b.Property<string>("ContractStageNum");

                    b.Property<DateTime?>("Created");

                    b.Property<DateTime?>("DateCompleted");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime?>("DueDate");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<DateTime?>("ExpectedDueDate");

                    b.Property<bool>("IncludeInProjectStatusRecord");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<int>("ProjectID");

                    b.Property<int?>("ProjectScheduleEntryID");

                    b.Property<int?>("ProjectScheduleEntryTypeID");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectScheduleEntryID");

                    b.HasIndex("ProjectScheduleEntryTypeID");

                    b.ToTable("ProjectScheduleEntry");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectScheduleEntryType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<int?>("ProjectTypeID");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("VersionNumber");

                    b.Property<string>("WBSCode")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ProjectTypeID");

                    b.ToTable("ProjectScheduleEntryType");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectStatusRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<decimal?>("ContractReceivedMoneyAmountActual")
                        .HasColumnType("decimal(32,2)");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<decimal?>("EmployeePayrollAmountActual")
                        .HasColumnType("decimal(32,2)");

                    b.Property<string>("ExternalDependenciesInfo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<decimal?>("OtherCostsAmountActual")
                        .HasColumnType("decimal(32,2)");

                    b.Property<decimal?>("PaidToSubcontractorsAmountActual")
                        .HasColumnType("decimal(32,2)");

                    b.Property<string>("PlannedReleaseInfo");

                    b.Property<string>("ProblemsText")
                        .IsRequired();

                    b.Property<int?>("ProjectID")
                        .IsRequired();

                    b.Property<DateTime?>("ProjectStatusBeginDate")
                        .IsRequired();

                    b.Property<DateTime?>("ProjectStatusEndDate")
                        .IsRequired();

                    b.Property<int?>("ProjectStatusRecordID");

                    b.Property<string>("ProposedSolutionText")
                        .IsRequired();

                    b.Property<string>("RiskIndicatorComments");

                    b.Property<int>("RiskIndicatorFlag");

                    b.Property<string>("StatusPeriodName")
                        .IsRequired();

                    b.Property<string>("StatusText")
                        .IsRequired();

                    b.Property<string>("SupervisorComments");

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectStatusRecordID");

                    b.ToTable("ProjectStatusRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityType");

                    b.Property<int?>("BusinessTripCostSubItemID");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<int>("TSApproveMode");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<bool>("Utilization");

                    b.HasKey("ID");

                    b.HasIndex("BusinessTripCostSubItemID");

                    b.ToTable("ProjectType");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.QualifyingRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleType");

                    b.Property<string>("ShortName");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("QualifyingRole");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.QualifyingRoleRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("ActualAverageHourPayrollValue");

                    b.Property<decimal?>("ActualAverageMonthPayrollValue");

                    b.Property<int?>("DepartmentID")
                        .IsRequired();

                    b.Property<decimal?>("FRCCorrectionFactorValue");

                    b.Property<decimal?>("FRCInflationRateValue");

                    b.Property<int?>("HoursPlan");

                    b.Property<decimal?>("MonthRateValue");

                    b.Property<int?>("QualifyingRoleID")
                        .IsRequired();

                    b.Property<DateTime?>("RateDateBegin")
                        .IsRequired();

                    b.Property<decimal?>("RateValue")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("QualifyingRoleID");

                    b.ToTable("QualifyingRoleRate");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.RPCSUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowSendEmailNotifications");

                    b.Property<bool>("IsAdAdmin");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsApiAccess");

                    b.Property<bool>("IsDataAdmin");

                    b.Property<bool>("IsDepartmentManager");

                    b.Property<bool>("IsDepartmentPayrollRead");

                    b.Property<bool>("IsDirector");

                    b.Property<bool>("IsEmployee");

                    b.Property<bool>("IsFin");

                    b.Property<bool>("IsHR");

                    b.Property<bool>("IsIDDocsAdmin");

                    b.Property<bool>("IsPM");

                    b.Property<bool>("IsPMOAdmin");

                    b.Property<bool>("IsPMOChief");

                    b.Property<bool>("IsPayrollAdmin");

                    b.Property<bool>("IsPayrollFullRead");

                    b.Property<bool>("IsTSAdmin");

                    b.Property<string>("OOLogin");

                    b.Property<string>("UserLogin")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("RPCSUser");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ReportingPeriod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int>("Month");

                    b.Property<DateTime>("NewTSRecordsAllowedUntilDate");

                    b.Property<DateTime>("TSRecordsEditApproveAllowedUntilDate");

                    b.Property<int>("VacationNoPaidProjectID");

                    b.Property<int>("VacationProjectID");

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("VacationNoPaidProjectID");

                    b.HasIndex("VacationProjectID");

                    b.ToTable("ReportingPeriod");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.TSAutoHoursRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<DateTime?>("BeginDate")
                        .IsRequired();

                    b.Property<DateTime?>("Created");

                    b.Property<double?>("DayHours")
                        .IsRequired();

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<int?>("ProjectID")
                        .IsRequired();

                    b.Property<int?>("TSAutoHoursRecordID");

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TSAutoHoursRecordID");

                    b.ToTable("TSAutoHoursRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.TSHoursRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<int?>("EmployeeID")
                        .IsRequired();

                    b.Property<string>("ExternalSourceElementID")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalSourceListID")
                        .HasMaxLength(64);

                    b.Property<double?>("Hours")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("PMComment");

                    b.Property<int?>("ParentTSAutoHoursRecordID");

                    b.Property<int?>("ParentVacationRecordID");

                    b.Property<int?>("ProjectID")
                        .IsRequired();

                    b.Property<DateTime?>("RecordDate")
                        .IsRequired();

                    b.Property<int>("RecordSource");

                    b.Property<int>("RecordStatus");

                    b.Property<int?>("TSHoursRecordID");

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ParentTSAutoHoursRecordID");

                    b.HasIndex("ParentVacationRecordID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TSHoursRecordID");

                    b.ToTable("TSHoursRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.VacationRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("AuthorSID");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeletedBySID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Editor");

                    b.Property<string>("EditorSID");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("ExternalSourceElementID");

                    b.Property<string>("ExternalSourceListID");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVersion");

                    b.Property<int?>("ItemID");

                    b.Property<DateTime?>("Modified");

                    b.Property<int>("RecordSource");

                    b.Property<DateTime>("VacationBeginDate");

                    b.Property<int>("VacationDays");

                    b.Property<DateTime>("VacationEndDate");

                    b.Property<int?>("VacationRecordID");

                    b.Property<int>("VacationType");

                    b.Property<int?>("VersionNumber");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("VacationRecordID");

                    b.ToTable("VacationRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.RecordVersionHistory.ChangeInfoRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BudgetLimitID");

                    b.Property<int?>("CostItemID");

                    b.Property<int?>("CostSubItemID");

                    b.Property<int?>("DepartmentID");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectID");

                    b.Property<int?>("ProjectScheduleEntryID");

                    b.Property<int?>("ProjectScheduleEntryTypeID");

                    b.Property<int?>("ProjectStatusRecordID");

                    b.Property<int?>("TSAutoHoursRecordID");

                    b.Property<int?>("TSHoursRecordID");

                    b.Property<int?>("VacationRecordID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("BudgetLimitID");

                    b.HasIndex("CostItemID");

                    b.HasIndex("CostSubItemID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectScheduleEntryID");

                    b.HasIndex("ProjectScheduleEntryTypeID");

                    b.HasIndex("ProjectStatusRecordID");

                    b.HasIndex("TSAutoHoursRecordID");

                    b.HasIndex("TSHoursRecordID");

                    b.HasIndex("VacationRecordID");

                    b.ToTable("ChangeInfoRecord");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.BudgetLimit", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.BudgetLimit")
                        .WithMany("Versions")
                        .HasForeignKey("BudgetLimitID");

                    b.HasOne("RMX.RPCS.Core.Models.CostSubItem", "CostSubItem")
                        .WithMany()
                        .HasForeignKey("CostSubItemID");

                    b.HasOne("RMX.RPCS.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.CostItem", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.CostItem")
                        .WithMany("Versions")
                        .HasForeignKey("CostItemID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.CostSubItem", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.CostItem", "CostItem")
                        .WithMany()
                        .HasForeignKey("CostItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.CostSubItem")
                        .WithMany("Versions")
                        .HasForeignKey("CostSubItemID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Department", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "DepartmentManagerAssistant")
                        .WithMany()
                        .HasForeignKey("DepartmentManagerAssistantID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "DepartmentManager")
                        .WithMany()
                        .HasForeignKey("DepartmentManagerID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "DepartmentPA")
                        .WithMany()
                        .HasForeignKey("DepartmentPAID");

                    b.HasOne("RMX.RPCS.Core.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID");

                    b.HasOne("RMX.RPCS.Core.Models.Department", "ParentDepartment")
                        .WithMany("Versions")
                        .HasForeignKey("ParentDepartmentID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Employee", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Department", "Department")
                        .WithMany("EmployeesInDepartment")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("RMX.RPCS.Core.Models.EmployeeGrad", "EmployeeGrad")
                        .WithMany()
                        .HasForeignKey("EmployeeGradID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee")
                        .WithMany("Versions")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("RMX.RPCS.Core.Models.EmployeeLocation", "EmployeeLocation")
                        .WithMany()
                        .HasForeignKey("EmployeeLocationID");

                    b.HasOne("RMX.RPCS.Core.Models.EmployeePosition", "EmployeePosition")
                        .WithMany()
                        .HasForeignKey("EmployeePositionID");

                    b.HasOne("RMX.RPCS.Core.Models.EmployeePositionOfficial", "EmployeePositionOfficial")
                        .WithMany()
                        .HasForeignKey("EmployeePositionOfficialID");

                    b.HasOne("RMX.RPCS.Core.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeCategory", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("EmployeeCategories")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeDepartmentAssignment", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("EmployeeDepartmentAssignments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeGradAssignment", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.EmployeeGrad", "EmployeeGrad")
                        .WithMany()
                        .HasForeignKey("EmployeeGradID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("EmployeeGradAssignments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePositionAssignment", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("EmployeePositionAssignments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.EmployeePosition", "EmployeePosition")
                        .WithMany()
                        .HasForeignKey("EmployeePositionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePositionOfficial", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeePositionOfficialAssignment", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("EmployeePositionOfficialAssignments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.EmployeePositionOfficial", "EmployeePositionOfficial")
                        .WithMany()
                        .HasForeignKey("EmployeePositionOfficialID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.EmployeeQualifyingRole", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("EmployeeQualifyingRoles")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.QualifyingRole", "QualifyingRole")
                        .WithMany()
                        .HasForeignKey("QualifyingRoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ExpensesRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.CostSubItem", "CostSubItem")
                        .WithMany()
                        .HasForeignKey("CostSubItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany("ExpensesRecords")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.Project", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "EmployeeCAM")
                        .WithMany()
                        .HasForeignKey("EmployeeCAMID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "EmployeePA")
                        .WithMany()
                        .HasForeignKey("EmployeePAID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee", "EmployeePM")
                        .WithMany()
                        .HasForeignKey("EmployeePMID");

                    b.HasOne("RMX.RPCS.Core.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID");

                    b.HasOne("RMX.RPCS.Core.Models.Department", "ProductionDepartment")
                        .WithMany()
                        .HasForeignKey("ProductionDepartmentID");

                    b.HasOne("RMX.RPCS.Core.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectMember", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany("ProjectTeam")
                        .HasForeignKey("ProjectID");

                    b.HasOne("RMX.RPCS.Core.Models.ProjectRole", "ProjectRole")
                        .WithMany()
                        .HasForeignKey("ProjectRoleID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectReportRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany("ReportRecords")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectScheduleEntry", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.ProjectScheduleEntry")
                        .WithMany("Versions")
                        .HasForeignKey("ProjectScheduleEntryID");

                    b.HasOne("RMX.RPCS.Core.Models.ProjectScheduleEntryType", "ProjectScheduleEntryType")
                        .WithMany()
                        .HasForeignKey("ProjectScheduleEntryTypeID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectScheduleEntryType", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectStatusRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany("StatusRecords")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.ProjectStatusRecord")
                        .WithMany("Versions")
                        .HasForeignKey("ProjectStatusRecordID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ProjectType", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.CostSubItem", "BusinessTripCostSubItem")
                        .WithMany()
                        .HasForeignKey("BusinessTripCostSubItemID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.QualifyingRoleRate", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.QualifyingRole", "QualifyingRole")
                        .WithMany()
                        .HasForeignKey("QualifyingRoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.ReportingPeriod", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Project", "VacationNoPaidProject")
                        .WithMany()
                        .HasForeignKey("VacationNoPaidProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.Project", "VacationProject")
                        .WithMany()
                        .HasForeignKey("VacationProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.TSAutoHoursRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.TSAutoHoursRecord")
                        .WithMany("Versions")
                        .HasForeignKey("TSAutoHoursRecordID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.TSHoursRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.TSAutoHoursRecord", "ParentTSAutoHoursRecord")
                        .WithMany()
                        .HasForeignKey("ParentTSAutoHoursRecordID");

                    b.HasOne("RMX.RPCS.Core.Models.VacationRecord", "ParentVacationRecord")
                        .WithMany()
                        .HasForeignKey("ParentVacationRecordID");

                    b.HasOne("RMX.RPCS.Core.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.TSHoursRecord")
                        .WithMany("Versions")
                        .HasForeignKey("TSHoursRecordID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.Models.VacationRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.Employee", "Employee")
                        .WithMany("VacationRecords")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RMX.RPCS.Core.Models.VacationRecord")
                        .WithMany("Versions")
                        .HasForeignKey("VacationRecordID");
                });

            modelBuilder.Entity("RMX.RPCS.Core.RecordVersionHistory.ChangeInfoRecord", b =>
                {
                    b.HasOne("RMX.RPCS.Core.Models.BudgetLimit")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("BudgetLimitID");

                    b.HasOne("RMX.RPCS.Core.Models.CostItem")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("CostItemID");

                    b.HasOne("RMX.RPCS.Core.Models.CostSubItem")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("CostSubItemID");

                    b.HasOne("RMX.RPCS.Core.Models.Department")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("RMX.RPCS.Core.Models.Employee")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("RMX.RPCS.Core.Models.Project")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("ProjectID");

                    b.HasOne("RMX.RPCS.Core.Models.ProjectScheduleEntry")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("ProjectScheduleEntryID");

                    b.HasOne("RMX.RPCS.Core.Models.ProjectScheduleEntryType")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("ProjectScheduleEntryTypeID");

                    b.HasOne("RMX.RPCS.Core.Models.ProjectStatusRecord")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("ProjectStatusRecordID");

                    b.HasOne("RMX.RPCS.Core.Models.TSAutoHoursRecord")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("TSAutoHoursRecordID");

                    b.HasOne("RMX.RPCS.Core.Models.TSHoursRecord")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("TSHoursRecordID");

                    b.HasOne("RMX.RPCS.Core.Models.VacationRecord")
                        .WithMany("ChangedRecords")
                        .HasForeignKey("VacationRecordID");
                });
#pragma warning restore 612, 618
        }
    }
}
